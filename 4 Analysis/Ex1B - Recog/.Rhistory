install.packages("updateR")
install.packages("installr")
installr::updateR()
library(reshape)
install.packages("dplyr")
install.packages("reshape")
install.packages("ez")
install.packages("lrd")
install.packages("vectsects")
install.packages("Vectsects")
install.packages("VectSects")
install.packages("psych")
install.packages("Hmisc")
install.packages("PsychReport")
install.packages("psychReport")
install.packages("caret")
2406*.10
setwd("C:/Users/nickm/OneDrive/Documents/GitHub/DRM-Reactivity/4 Analysis/Ex1B - Recog")
####Set up####
##read in the data
read = read.csv("Control Group.csv")
####Set up####
##read in the data
read = read.csv("Data/Control Group.csv")
iJOL = read.csv("Data/JOL Item.csv")
gJOL = read.csv("Data/JOL Global.csv")
##combine
dat = rbind(read, ijol, gjol)
##combine
dat = rbind(read, iJOL, gJOL)
View(iJOL)
View(read)
View(iJOL)
View(gJOL)
View(iJOL)
View(read)
View(iJOL)
View(read)
##combine
read = read[ , -c(3:4)]
iJOL = iJOL[ , -c(3:4)]
gJOL = gJOL[ , -c(3:4)]
dat = rbind(read, iJOL, gJOL)
##load libraries#
library(reshape)
library(ez)
library(psychReport)
####Check the data####
tapply(dat$scored, list(dat$Direction, dat$Encoding), mean)
####Check the data####
tapply(dat$scored, list(dat$Encoding, dat$Direction), mean)
####Check the data####
##presented
presented = subset(dat, dat$Direction != "Control")
control = subset(dat, dat$Direction == "Control")
tapply(presented$scored, list(presented$Encoding, presented$Direction), mean)
control$scored = control$scored - 1
View(control)
##false recognition of control items
control = subset(dat, dat$Direction == "Control")
control$scored = (control$scored - 1) * -1
#false alarms
tapply(control$scored, control$Encoding, mean)
View(presented)
####Run the ANOVA####
ezANOVA(presented,
dv = scored,
within = Direction,
between = Encoding,
wid = Username,
type = 3,
detailed = T)
#control items
ezANOVA(control,
dv = scored,
between = Encoding,
wid = Username,
type = 3,
detailed = T)
#turn off scientific notation
options(scipen = 999)
####Check the data####
gJOL.wide = cast(gJOL, Username ~ Score, mean)
####Check the data####
gJOL.wide = cast(gJOL, Username ~ score, mean)
View(gJOL)
####Check the data####
gJOL.wide = cast(gJOL, Username ~ scored, mean)
####Check the data####
gJOL.wide = cast(gJOL[ , c(1, 3, 5)], Username ~ scored, mean)
####Check the data####
gJOL.wide = cast(gJOL[ , c(1, 3, 5)], Username ~ Direction, mean)
iJOL.wide = cast(iJOL[ , c(1, 3, 5)], Username ~ Direction, mean)
read.wide = cast(read[ , c(1, 3, 5)], Username ~ Direction, mean)
View(gJOL.wide)
View(iJOL.wide)
View(read.wide)
####Run the post-hocs####
###Start w/ presented items
tapply(presented$scored, presented$Encoding, mean)
tappy(presented$scored, presented$Direction, mean)
tapply(presented$scored, presented$Direction, mean)
tapply(presented$scored, list(presented$Encoding, presented$Direction), mean)
##break down the interaction
gjol = subset(presented, presented$Encoding == "Global JOL")
View(presented)
##break down the interaction
gjol = subset(presented, presented$Encoding == "Global_JOL")
View(iJOL)
ijol = subset(presented, presented$Encoding == "Item_JOL")
read = subset(presented, presented$Encoding == "Read")
gjol2 = cast(gjol, Username ~ Direction, mean)
View(gjol2)
ijol2 = cast(ijol, Username ~ Direction, mean)
read2 = cast(read, Username ~ Direction, mean)
###Related Lists
#global vs item
temp = t.test(gjol2$Related, ijol2$Related, paired = F, p.adjust.methods = "bonferroni")
temp
#item vs. read
temp = t.test(ijol2$Related, read2$Related, paired = F, p.adjust.methods = "bonferroni")
temp
###Related Lists
#global vs item
temp = t.test(gjol2$Related, ijol2$Related, paired = F, p.adjust.methods = "bonferroni")
temp
###Related Lists
#global vs item
temp = t.test(gjol2$Related, ijol2$Related, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
#item vs. read
temp = t.test(ijol2$Related, read2$Related, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
###Related Lists
#global vs item
temp = t.test(gjol2$Related, ijol2$Related, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
read2$Related
ijol2$Related
gjol2$Related
###Related Lists
#global vs item
temp = t.test(gjol2$Related, ijol2$Related, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
round(temp$p.value, 3)
temp$statistic
(temp$conf.int[2] - temp$conf.int[1]) / 3.92 #SIG
#item vs. read
temp = t.test(ijol2$Related, read2$Related, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
round(temp$p.value, 3)
temp$statistic
(temp$conf.int[2] - temp$conf.int[1]) / 3.92 #SIG
#global vs read
temp = t.test(gjol2$Related, read2$Related, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
##Unrelated
#global vs item
temp = t.test(gjol2$Unrelated, ijol2$Unrelated, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
#item vs. read
temp = t.test(ijol2$Unrelated, read2$Unrelated, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
#global vs read
temp = t.test(gjol2$Unrelated, read2$Unrelated, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
###Unrelated
gjol = subset(control, control$Encoding == "Global_JOL")
###Unrelated
gjol3 = subset(control, control$Encoding == "Global_JOL")
ijol3 = subset(control, control$Encoding == "Item_JOL")
read3 = subset(control, control$Encoding == "Read")
gjol4 = cast(gjol3, Username ~ Direction, mean)
ijol4 = cast(ijol3, Username ~ Direction, mean)
read4 = cast(read3, Username ~ Direction, mean)
##t-tests
#global vs item
temp = t.test(gjol4$Control, ijol4$Control, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
round(temp$p.value, 3)
#item vs. read
temp = t.test(ijol4$Control, read4$Control, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
#global vs read
temp = t.test(gjol4$Control, read4$Control, paired = F, p.adjust.methods = "bonferroni", var.equal = T)
temp
View(gjol4)
View(dat)
