install.packages("updateR")
install.packages("installr")
installr::updateR()
library(reshape)
install.packages("dplyr")
install.packages("reshape")
install.packages("ez")
install.packages("lrd")
install.packages("vectsects")
install.packages("Vectsects")
install.packages("VectSects")
install.packages("psych")
install.packages("Hmisc")
install.packages("PsychReport")
install.packages("psychReport")
install.packages("caret")
2406*.10
12*9
14*19
108/266
19/12
12/12
14/9
12*1.5
9*1/5
9*1.5
13.5/9
18/12
15-13.5
108/266
13.5*18
108/243
13.5/9
18/12
getwd()
library(lrd)
write.csv(lrd::cued_recall_manuscript, row.names = F)
write.csv(lrd::cued_recall_manuscript, file = "lrd_test.csv", row.names = F)
table(lrd::cued_recall_manuscript$Trial_num)
View(subst(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 1))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 1))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 2))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 3))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 20))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 18))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 17))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 19))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 10))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 15))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 16))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 14))
View(subset(lrd::cued_recall_manuscript, lrd::cued_recall_manuscript$Trial_num == 13))
write.csv(lrd::answer_key_free2, file = "free_key.csv", row.names = F)
write.csv(lrd::free_data, file = "free_data.csv", row.names = F)
write.csv(lrd::multi_data, file = "free_m.csv", row.names = F)
write.csv(lrd:multi_answers, file = "key_m.csv", row.names = F)
write.csv(lrd::multi_answers, file = "key_m.csv", row.names = F)
multi = lrd::multi_answers
View(multi)
library(reshape)
View(multi)
multi2 = melt(multi)
View(multi2)
multi2 = melt(multi, measure.vars = c("List1", "List2", "List3", "List4", "List5", "List6"))
View(multi2)
colnames(mult2)[1:2] = c("List_Type", "Key")
colnames(multi2)[1:2] = c("List_Type", "Key")
multi2$Key = tolower(multi2$Key)
write.csv(multi2, file = "free_M_key.csv", row.names = F)
library(scales)
cite(scales)
citation(scales)
citation("scales")
install.packages("updateR")
install.packages("installr")
installr::updater()
library(lrd)
citation(package = "lrd")
371+400+156+30+65+200+400+75
3600-1697-300-1000
setwd("C:/Users/nickm/OneDrive/Documents/GitHub/DRM-Reactivity/4 Analysis/RTs")
####read in the data####
dat1 = read.csv("ex1a encoding final")
####read in the data####
dat1 = read.csv("ex1a encoding final.csv")
dat2 = read.csv("ex1b encoding final.csv")
dat3 = read.csv("ex2 encoding final.csv")
View(dat3)
View(dat2)
View(dat1)
##collapse across list types
library(reshape)
View(dat1)
dat1.long = melt(dat1, measure.vars = c("Related", "Unrelated"))
dat2.long = melt(dat2, measure.vars = c("Related", "Unrelated"))
dat3.long = melt(dat3, measure.vars = "V1")
View(dat3.long)
combined = rbind(dat1.long, dat2.long, dat3.long)
colnames(combined)[4:5] = c("Direction", "RT")
##run the anova
library(ez)
View(combined)
model = ezANOVA(combined,
dv = RT,
between = .(Encoding, Experiment),
wid = Username,
type = 3,
detailed = T)
model = ezANOVA(combined,
dv = RT,
between = .(Encoding, experiment),
wid = Username,
type = 3,
detailed = T)
combined = na.omit(combined)
model = ezANOVA(combined,
dv = RT,
between = .(Encoding, experiment),
wid = Username,
type = 3,
detailed = T)
model
options(scipen = 999)
model
##okay, break it down
item = subset(combined, combined$Encoding == "item")
global = subset(combined, combined$Encoding == "global")
read = subset(combined, combined$Encoding == "read")
t.test(read$RT, global$RT, paired = F, var.equal = T)
t.test(item$RT, global$RT, paired = F, var.equal = T)
t.test(itemd$RT, read$RT, paired = F, var.equal = T)
t.test(item$RT, read$RT, paired = F, var.equal = T)
tapply(combined$RT, combined$Encoding, mean)
